initiate the project using npm init
In package.json we all have the dependencies and data about it.
to install express write npm install express --save
install cors similarly
create a index.js file.
now to initialize this as a git init
Now write and test your endpoints along with creating an instance of an express application 
Now create a .gitignore file
first add the files on github as git add -A 
then commit  the changes git commit -m "feat: Adding apis to get users and users id"
Now go to github and create a new repositary
now copy the url to clone the repositary to and connect to this 
--folder...do git remote add origin https://......<-paste the URL
now do finally push the code as git push -u origin master
Now comes the deployment on the vercel
Now go to repositary you have to host
then click on settings
under general :->under security=>Secrets and variables->actions
under repositary secret create a new repositary secret
Go to get the vercel token we need to generate the token
for that go to vercel->account settings->Setting->tokens->and generate a new token

copy the token from vercel and paste 
now create a vercel.json file
and add,commit changes and push it to the github
Now finally go to vercel go to the dashboard and create a new project
after importing it is finally deployed on vercel
Now comes the next section:
npm install sequelize pg dotenv
pg->postgreSql driver for node.js which allows sequelize to communicate with postgresSql
npm install --save-dev sequelize-cli nodemon
sequelize-cli is a command line tool for sequelize that helps generate configurations,
models,migrations,seeders

npx sequelize-cli init
npx sequelize-cli init  Initializes Sequelize in your project 
by creating the necessary folders and files
 (config, models, migrations, seeders)
now we need to create supabase account and connect sequelize to 
--to supabase 
now create .env  file after creating an organisation and new project setup
In that .env declare an environment variables:
DB_USER
DB_PASSWORD
DB_NAME
DB_HOST
DB_PORT=5432
PORT=3000
these are credentials needed to your postgresSql database which will be hosted on supabase
How it's used: These values are loaded into the process.env object at runtime via 
the dotenv package, 
so they can be accessed by the rest of your codebase.
Go to supabase dashboard => Go to settings=>project settings=>database
configuration..copy the environment variables
In config.js import dotenv require("dotenv").config();
config/config.js will be used by sequelize to configure the connection
to your postgresSql. It reads environment variables from .env to configure 
the connection string
dotenv is used to load the environment variables from .env file.
development and production configurations are identical
and hence they define the database connection settings.
dialect: "postgres" specifies that you’re using PostgreSQL.
logging: false disables logging SQL queries in the console.
How it’s used:
This configuration is later passed to Sequelize to initialize a connection to the 
database.
The configuration is environment-dependent 
(e.g., for different database environments like local development or production).


Declare the username,password,database,host,post,dialect as postgres and logging as false,
assign using process.env.then write the variable name from .env
declare a new folder=>lib=>sequelize.js=>sequelize instance
Now coming to the lib/sequelize.js 
This file is responsible for initializing the Sequelize connection using the 
configuration set up earlier.
Explanation:
This code imports Sequelize, which is used to interact with the PostgreSQL database.
config: This line selects the appropriate configuration (development or production) 
based on the NODE_ENV environment variable.
new Sequelize(): This creates a Sequelize instance using the database credentials 
from the environment file.
database, username, password: These are passed from the .env file.
host: The host of your PostgreSQL database.
dialect: "postgres": Specifies PostgreSQL as the database system.
port: Port number to connect to PostgreSQL.
logging: config.logging: Controls whether SQL queries should be logged 
to the console.
How it’s used:
This is imported into other files where you need to interact with the database 
(e.g., models, migrations).

models/user.js:
This file defines the structure of the user table in your database, 
which will be used by Sequelize to interact with the table.
Explanation:
sequelize.define(): This function defines the schema for the user table.
username: A unique string, which cannot be null.
name: A string representing the user’s full name.
repoCount: An integer representing the number of repositories the user has.
location: A string representing where the user is located.
timestamps: true: Sequelize will automatically add 
createdAt and updatedAt fields to the table.
How it’s used:
This model represents the user table in the database, 
and you can use this model to query, insert, or update user records.


migrations/XXXXXXXXXXXXXX-create-user-table.js (Database Table Creation)
This is a migration file used to create or modifying the users table in the database.
 Sequelize migrations allow you to manage changes to your database schema over time 
 (e.g., creating tables, modifying columns).
 Under the hood migrations translate javascript code into SQL commands to update database
 How migrations work:
 Each migration file checks the specific database change
 sequelize creates a table called as SequelizeMeta in your database to keep track
 of migrations 
 This table stores the filenames of the executed migrations.
When you run npx sequelize-cli db:migrate:
Sequelize checks which migrations have already been applied (using SequelizeMeta).
It then applies only new migration files to the database.(tracks pending changes)
Applied migrations are logged in SequelizeMeta.
Actually when you run the npx sequelize-cli db:migrate 
sequelize checks the migrations folder for migration files
It compares these files against the entries in sequelize metaTable
IF the migration file is not found then only sequelize executes it.
after executing migrations sequelize logs its filename into SequelizeMeta table to 
avoid running it again.
If there is no migrations were executed message that means that 
it did not found the migrations files. the current status was already in SequelizeMeta
So it is important to generate a new migrations using below command :
npx sequelize-cli migration:generate --name create-user-table
then do npx sequelize-cli db:migrate

up() is used to create the users table 
queryInterface.createTable() creates the table and defines the columns (id, username, name, repoCount, location, createdAt, and updatedAt).
down(): This function removes the users table in case you need to revert this migration.
How it’s used:

You run sequelize-cli db:migrate to apply this migration and create the users table.
If you need to undo this, you run sequelize-cli db:migrate:undo


seeders/XXXXXXXXXXXXXX-demo-users.js (Seeding Data)
This file seeds initial data into the users table. Seeder files are used to insert demo data into the database for development or testing purposes.
Explanation:
up(): Seeds the users table with multiple records. The data contains fields like username, name, repoCount, etc.
down(): Deletes all records from the users table to undo the seeding.
How it’s used:

To insert the seed data, you run npx sequelize-cli db:seed:all.
To delete the seed data, you run npx sequelize-cli db:seed:undo:all

The centre of the project root->index.js
It finally runs an express application

Flow-
Firstly the dependencies are installed and environment variables are stored in 
dotenv file. then config file uses environment variables to connect to your database
differentiating between development and production. Then data structure is defined in 
sequelize instance in models/user.js.After model schema is defined the migration is 
generated and applied. Then seed is generated and run. 